@startuml General_SequenceDiagram_Group01

title General Sequence Diagram, Group01.

participant ScientificCalculator as calc
participant InputDistinguisher as input
participant MathOperation as math
participant StackOperation as stack
participant VariablesOperation as Variables
participant complexNumbersStack as num_stack
participant variablesMap as var_map

-> calc:calculate()
activate calc


' math op case starts
alt input is a math operation

calc -> input : IsMathOperation()
activate input
input -> input : checks if input is a mathematical operation
input --> calc : mathOperation : boolean
deactivate input

calc -> calc : calculateMathOperation()
calc -> math : execute()
activate math
math -> num_stack : execute()
activate num_stack
num_stack -> num_stack : [Update stack]
num_stack --> math
deactivate num_stack
math --> calc
deactivate math



' stack op case starts
else input is a stack operation

calc -> input : IsStackOperation()
activate input
input -> input : checks if input is a stack operation
input --> calc : stackOperation : boolean
deactivate input

calc -> calc : calculateStackOperation()
calc -> stack : execute()
activate stack
stack -> num_stack : execute()
activate num_stack
num_stack -> num_stack : [Update stack]
num_stack --> stack
deactivate num_stack
stack --> calc
deactivate stack


' variables op case starts
else input is a variables operation

calc -> input : IsVariablesOperation()
activate input
input -> input : checks if input is a variables operation
input --> calc : VariablesOperation : boolean
deactivate input

calc -> calc : calculateVariablesOperation()
calc -> Variables : execute()
activate Variables
alt is a stack to variable operation
Variables -> var_map : execute()
activate var_map
var_map -> var_map : [Update variable]
var_map --> Variables
deactivate var_map
else is a variable to stack operation
Variables -> num_stack : execute()
activate num_stack
num_stack -> num_stack : [Update stack]
num_stack -->Variables
deactivate num_stack
end
Variables --> calc
deactivate Variables


' complex number case starts
else input is a complex number 

calc -> input : IsComplexNumber()
activate input
input -> input : checks if input is a complex number
input --> calc : ComplexNumber : boolean
deactivate input

calc -> num_stack : saveComplexNumber()
activate num_stack
num_stack -> num_stack : [Update stack]
num_stack --> calc
deactivate num_stack
end

@enduml